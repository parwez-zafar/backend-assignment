{
    "openapi": "3.0.0",
    "info": {
      "title": "Your API",
      "version": "1.0.0",
      "description": "Your API description"
    },
    "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "maxLength": 30,
            "minLength": 4
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 8
          },
          "avatar": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "User's role",
            "default": "user"
          }
        },
        "required": ["name", "email", "password", "avatar"]
      }
    }
  },
    "paths": {
        "/api/v1/register": {
            "post": {
              "summary": "Register a new user",
              "description": "Create a new user account with the provided registration data.",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "User registered successfully."
                },
                "400": {
                  "description": "Bad request - Invalid registration data."
                },
                "500": {
                  "description": "Internal server error."
                }
              }
            }
          },
      "/api/v1/login": {
        "post": {
          "summary": "Login",
          "description": "Authenticate a user by providing their credentials.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "User's email address"
                    },
                    "password": {
                      "type": "string",
                      "description": "User's password"
                    }
                  },
                  "required": ["email", "password"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Login successful. Returns a JWT token for authentication."
            },
            "401": {
              "description": "Unauthorized - Invalid credentials."
            },
            "500": {
              "description": "Internal server error."
            }
          }
        }
      },
      "/api/v1/logout": {
        "get": {
          "summary": "Logout",
          "description": "Logs out the currently authenticated user.",
          "responses": {
            "200": {
              "description": "Logout successful."
            },
            "401": {
              "description": "Unauthorized - User is not authenticated."
            },
            "500": {
              "description": "Internal server error."
            }
          }
        }
      },
      "/api/v1/password/forgot": {
        "post": {
          "summary": "Forgot Password",
          "description": "Initiate the process to reset a user's forgotten password.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "User's email address"
                    }
                  },
                  "required": ["email"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset request successful. An email with reset instructions will be sent to the user."
            },
            "400": {
              "description": "Bad request - Invalid or missing email."
            },
            "500": {
              "description": "Internal server error."
            }
          }
        }
      },
      "/api/v1/password/reset/{resetToken}": {
        "post": {
          "summary": "Reset Password",
          "description": "Reset a user's password using the provided reset token.",
          "parameters": [
            {
              "name": "resetToken",
              "in": "path",
              "required": true,
              "description": "Token received by the user's email for password reset."
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "password": {
                      "type": "string",
                      "description": "New password for the user"
                    },
                    "confirmPassword": {
                      "type": "string",
                      "description": "Confirm the new password for the user"
                    }
                  },
                  "required": ["password", "confirmPassword"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset successful. User's password has been updated."
            },
            "400": {
              "description": "Bad request - Invalid or missing password or confirmPassword."
            },
            "401": {
              "description": "Unauthorized - Invalid reset token."
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      }

    
    }
    
}
      
  